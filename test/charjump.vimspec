let s:assert = themis#helper('assert')
call themis#helper('command').with(s:assert)
call themis#func_alias(s:assert)

function s:replace_termcodes(keys) abort
  return substitute(a:keys, '<[^<]\+>',
   \ '\=eval(printf(''"\%s"'', submatch(0)))', 'g')
endfunction

command -nargs=+ Normal execute 'normal' s:replace_termcodes(<q-args>)
command -nargs=+ AssertCurpos call s:assert.equals(getcurpos()[1 : 2], <args>)

" TODO: Test for f, F, t, T with {count}
Describe charjump.vim
  Before all
    noremap f <Plug>(charjump-inclusive-forward)
    noremap F <Plug>(charjump-inclusive-backward)
    noremap t <Plug>(charjump-exclusive-forward)
    noremap T <Plug>(charjump-exclusive-backward)
    noremap ; <Plug>(charjump-repeat-obverse)
    noremap , <Plug>(charjump-repeat-reverse)
  End

  After all
    %bwipeout!
  End

  Before each
    %bwipeout!
  End

  Context motion-f
    It jumps to a alphabet on word boundary.
      call setline(1, 'aaxaax')
      normal gg0fx
      AssertCurpos [1, 6]

      call setline(1, 'aaxaax bbxbbx')
      normal gg02fx
      AssertCurpos [1, 13]
    End

    It jumps to a alphabet on word boundary (snake_case).
      call setline(1, 'axa_aax_axa')
      normal gg0fx
      AssertCurpos [1, 7]

      call setline(1, 'axa_aax_axa_aax_axa')
      normal gg02fx
      AssertCurpos [1, 15]
    End

    It jumps to a alphabet on word boundary (CamelCase).
      call setline(1, 'AxaAaxAxa')
      normal gg0fx
      AssertCurpos [1, 6]

      call setline(1, 'AxaAaXaxa')
      normal gg0fx
      AssertCurpos [1, 6]
    End

    It also jumps to upper cased alphabet.
      call setline(1, 'aaX aax')
      normal gg0fx
      AssertCurpos [1, 3]
    End

    It stays at the initial cursor position when no points to jump.
      call setline(1, 'aaaaaa')
      normal gg0lfx
      AssertCurpos [1, 2]
    End

    It deletes to a given alphabet.
      call setline(1, 'aaxaax bbxbbx')
      normal gg0dfx
      AssertCurpos [1, 1]
      Assert Equals(getline(1), ' bbxbbx')
    End

    It removes nothing when character is not found.
      call setline(1, 'aaaaaa')
      call cursor(1, 1)

      normal dfx
      AssertCurpos [1, 1]
      Assert Equals(getline(1), 'aaaaaa')

      Normal df<C-v>x
      AssertCurpos [1, 1]
      Assert Equals(getline(1), 'aaaaaa')

      Normal df<C-k>a5
      AssertCurpos [1, 1]
      Assert Equals(getline(1), 'aaaaaa')
    End

    It is dot-repeatable.
      call setline(1, ['aax aaa', 'bbb xbx bbb'])
      normal gg0dfx
      AssertCurpos [1, 1]
      Assert Equals(getline(1), ' aaa')

      normal j.
      AssertCurpos [2, 1]
      Assert Equals(getline(2), 'bx bbb')
    End

    It is dot-repeatable even when invoked with {count}.
      call setline(1, ['aax aax aax', 'bxbx bxbx bbbx'])
      normal gg0d2fx
      Assert Equals(getline(1), ' aax')

      normal j.
      Assert Equals(getline(2), ' bbbx')
    End

    It jumps to a non-alphabet character.
      call setline(1, 'aa@aa@')
      normal gg0f@
      AssertCurpos [1, 3]
      normal 02f@
      AssertCurpos [1, 6]
    End

    It jumps to a non-alphabet character with digraph.
      call setline(1, 'aaあaaあ')
      Normal gg0f<C-k>a5
      AssertCurpos [1, 3]
      Normal gg02f<C-k>a5
      AssertCurpos [1, strlen('aaあaa') + 1]
    End

    It jumps to a alphabet anywhere with <C-v>.
      call setline(1, 'aaxaax')
      Normal gg0f<C-v>x
      AssertCurpos [1, 3]
    End

  End

  Context motion-F
    It jumps to a alphabet on word boundary.
      call setline(1, 'xaaxaa')
      normal gg$Fx
      AssertCurpos [1, 1]

      call setline(1, 'xaaxaa xbbxbb')
      normal gg$2Fx
      AssertCurpos [1, 1]
    End

    It jumps to a alphabet on word boundary (snake_case).
      call setline(1, 'axa_xaa_axa')
      normal gg$Fx
      AssertCurpos [1, 5]

      call setline(1, 'axa_xaa_axa_xaa_axa')
      normal gg$2Fx
      AssertCurpos [1, 5]
    End

    It jumps to a alphabet on word boundary (CamelCase).
      call setline(1, 'AxaXaaXxa')
      normal gg$Fx
      AssertCurpos [1, 7]

      call setline(1, 'AaxAaAaxa')
      normal gg$Fx
      AssertCurpos [1, 3]
    End

    It also jumps to upper cased alphabet.
      call setline(1, 'aax Xaa')
      normal gg$Fx
      AssertCurpos [1, 5]
    End

    It stays at the initial cursor position when no points to jump.
      call setline(1, 'aaaaaa')
      normal gg$hFx
      AssertCurpos [1, 5]
    End

    It deletes to a given alphabet.
      call setline(1, 'xaaxaa xbbxbb')
      normal gg$dFx
      AssertCurpos [1, 7]
      Assert Equals(getline(1), 'xaaxaa ')
    End

    It is dot-repeatable.
      call setline(1, ['aax aaa', 'bbb xbx bbb'])
      normal gg$dFx
      AssertCurpos [1, 2]
      Assert Equals(getline(1), 'aa')

      normal j$.
      AssertCurpos [2, 6]
      Assert Equals(getline(2), 'bbb xb')
    End

    It is dot-repeatable even when invoked with {count}.
      call setline(1, ['xaa xaa xaa', 'xbbb xbxb xbxb'])
      normal gg$d2Fx
      Assert Equals(getline(1), 'xaa ')

      normal j$.
      Assert Equals(getline(2), 'xbbb ')
    End

    It jumps to a non-alphabet character.
      call setline(1, 'aa@aa@aa')
      normal gg$F@
      AssertCurpos [1, 6]
      normal $2F@
      AssertCurpos [1, 3]
    End

    It jumps to a non-alphabet character with digraph.
      call setline(1, 'aaあaaあaa')
      Normal gg$F<C-k>a5
      AssertCurpos [1, strlen('aaあaa') + 1]
      Normal gg$2F<C-k>a5
      AssertCurpos [1, strlen('aa') + 1]
    End

    It jumps to a alphabet anywhere with <C-v>.
      call setline(1, 'xaaxaa')
      Normal gg$F<C-v>x
      AssertCurpos [1, 4]
    End

  End

  Context motion-t
    It jumps to a alphabet on word boundary.
      call setline(1, 'aaxaax')
      normal gg0tx
      AssertCurpos [1, 5]

      call setline(1, 'aaxaax bbxbbx')
      normal gg02tx
      AssertCurpos [1, 12]
    End

    It jumps to a alphabet on word boundary (snake_case).
      call setline(1, 'axa_aax_axa')
      normal gg0tx
      AssertCurpos [1, 6]

      call setline(1, 'axa_aax_axa_aax_axa')
      normal gg02tx
      AssertCurpos [1, 14]
    End

    It jumps to a alphabet on word boundary (CamelCase).
      call setline(1, 'AxaAaxAxa')
      normal gg0tx
      AssertCurpos [1, 5]

      call setline(1, 'AxaAaXaxa')
      normal gg0tx
      AssertCurpos [1, 5]
    End

    It also jumps to upper cased alphabet.
      call setline(1, 'aaX aax')
      normal gg0tx
      AssertCurpos [1, 2]
    End

    It stays at the initial cursor position when no points to jump.
      call setline(1, 'aaaaaa')
      normal gg0ltx
      AssertCurpos [1, 2]
    End

    It deletes to the char before the given alphabet.
      call setline(1, 'aaxaax bbxbbx')
      normal gg0dtx
      AssertCurpos [1, 1]
      Assert Equals(getline(1), 'x bbxbbx')
    End

    It is dot-repeatable.
      call setline(1, ['aax aaa', 'bbb xbx bbb'])
      normal gg0dtx
      AssertCurpos [1, 1]
      Assert Equals(getline(1), 'x aaa')

      normal j0.
      AssertCurpos [2, 1]
      Assert Equals(getline(2), 'xbx bbb')
    End

    It is dot-repeatable even when invoked with {count}.
      call setline(1, ['aax aax aax', 'bxbx bxbx bbbx'])
      normal gg0d2tx
      Assert Equals(getline(1), 'x aax')

      normal j.
      Assert Equals(getline(2), 'x bbbx')
    End

    It jumps to a non-alphabet character.
      call setline(1, 'aa@aa@')
      normal gg0t@
      AssertCurpos [1, 2]
      normal 02t@
      AssertCurpos [1, 5]
    End

    It jumps to a non-alphabet character with digraph.
      call setline(1, 'aaあaaあ')
      Normal gg0t<C-k>a5
      AssertCurpos [1, 2]
      Normal gg02t<C-k>a5
      AssertCurpos [1, strlen('aaあaa')]
    End

    It jumps to a alphabet anywhere with <C-v>.
      call setline(1, 'aaxaax')
      Normal gg0t<C-v>x
      AssertCurpos [1, 2]
    End

  End

  Context motion-T
    It jumps to a alphabet on word boundary.
      call setline(1, 'xaaxaa')
      normal gg$Tx
      AssertCurpos [1, 2]

      call setline(1, 'xaaxaa xbbxbb')
      normal gg$2Tx
      AssertCurpos [1, 2]
    End

    It jumps to a alphabet on word boundary (snake_case).
      call setline(1, 'axa_xaa_axa')
      normal gg$Tx
      AssertCurpos [1, 6]

      call setline(1, 'axa_xaa_axa_xaa_axa')
      normal gg$2Tx
      AssertCurpos [1, 6]
    End

    It jumps to a alphabet on word boundary (CamelCase).
      call setline(1, 'AxaXaaXxa')
      normal gg$Tx
      AssertCurpos [1, 8]

      call setline(1, 'AaxAaAaxa')
      normal gg$Tx
      AssertCurpos [1, 4]
    End

    It also jumps to upper cased alphabet.
      call setline(1, 'aax Xaa')
      normal gg$Tx
      AssertCurpos [1, 6]
    End

    It stays at the initial cursor position when no points to jump.
      call setline(1, 'aaaaaa')
      normal gg$hTx
      AssertCurpos [1, 5]
    End

    It deletes to a given alphabet.
      call setline(1, 'xaaxaa xbbxbb')
      normal gg$dTx
      AssertCurpos [1, 8]
      Assert Equals(getline(1), 'xaaxaa x')
    End

    It is dot-repeatable.
      call setline(1, ['aax aaa', 'bbb xbx bbb'])
      normal gg$dTx
      AssertCurpos [1, 3]
      Assert Equals(getline(1), 'aax')

      normal j$.
      AssertCurpos [2, 7]
      Assert Equals(getline(2), 'bbb xbx')
    End

    It is dot-repeatable even when invoked with {count}.
      call setline(1, ['xaa xaa xaa', 'xbbb xbxb xbxb'])
      normal gg$d2Tx
      Assert Equals(getline(1), 'xaa x')

      normal j$.
      Assert Equals(getline(2), 'xbbb x')
    End

    It jumps to a non-alphabet character.
      call setline(1, 'aa@aa@aa')
      normal gg$T@
      AssertCurpos [1, 7]
      normal $2T@
      AssertCurpos [1, 4]
    End

    It jumps to a non-alphabet character with digraph.
      call setline(1, 'aaあaaあaa')
      Normal gg$T<C-k>a5
      AssertCurpos [1, strlen('aaあaaあ') + 1]
      Normal gg$2T<C-k>a5
      AssertCurpos [1, strlen('aaあ') + 1]
    End

    It jumps to a alphabet anywhere with <C-v>.
      call setline(1, 'xaaxaa')
      Normal gg$T<C-v>x
      AssertCurpos [1, 5]
    End

  End

  Context motion-;
    Context with f
      It repeats previous search.
        call setline(1, 'aax bbx')
        normal gg02fx
        AssertCurpos [1, 7]

        normal 0;
        AssertCurpos [1, 3]
      End

      It can be dot-repeated.
        call setline(1, ['aax bbx', 'aaax bbbx'])
        normal gg0fx

        normal 0d;
        Assert Equals(getline(1), ' bbx')

        normal j0.
        Assert Equals(getline(2), ' bbbx')
      End

    End

    Context with F
      It repeats previous search.
        call setline(1, 'xaa xbb')
        normal gg$Fx;
        AssertCurpos [1, 1]

        normal gg$Fx$;
        AssertCurpos [1, 5]
      End

      It can be dot-repeated.
        call setline(1, ['xaa xbb', 'xaaa xbbb'])
        normal gg$Fx$d;
        Assert Equals(getline(1), 'xaa ')

        normal j$.
        Assert Equals(getline(2), 'xaaa ')
      End

    End

    Context with t
      It repeats previous search.
        call setline(1, 'aax bbx')
        normal gg02fx
        AssertCurpos [1, 7]

        normal 0;
        AssertCurpos [1, 3]
      End

      It can be dot-repeated.
        call setline(1, ['aax bbx', 'aaax bbbx'])
        normal gg0fx

        normal 0d;
        Assert Equals(getline(1), ' bbx')

        normal j0.
        Assert Equals(getline(2), ' bbbx')
      End

    End

    Context with T
      It repeats previous search.
        call setline(1, 'xaa xbb')
        normal gg$Tx;
        AssertCurpos [1, 2]

        normal gg$Tx$;
        AssertCurpos [1, 6]
      End

      It can be dot-repeated.
        call setline(1, ['xaa xbb', 'xaaa xbbb'])
        normal gg$Tx$d;
        Assert Equals(getline(1), 'xaa x')

        normal j$.
        Assert Equals(getline(2), 'xaaa x')
      End

    End

  End

  Context motion-,
    Context with f
      It repeats previous search inversely.
        call setline(1, 'aax xbx xcc')
        normal gg02fx$,
        AssertCurpos [1, 9]
      End

      It can be dot-repeated.
        call setline(1, ['aax xbb', 'aaax xbbb'])
        normal gg0fx$d,
        Assert Equals(getline(1), 'aax ')

        normal j$.
        Assert Equals(getline(2), 'aaax ')
      End

    End

    Context with F
      It repeats previous search.
        normal Fx

        call setline(1, 'aax bbx ccx')
        normal gg0,
        AssertCurpos [1, 3]

        normal ,
        AssertCurpos [1, 7]
      End

      It can be dot-repeated.
        call setline(1, ['aax xbb', 'aaax xbbb'])
        normal gg$Fx0d,
        Assert Equals(getline(1), ' xbb')

        normal j0.
        Assert Equals(getline(2), ' xbbb')
      End

    End

    Context with t
      It repeats previous search inversely.
        call setline(1, 'aax xbx xcc')
        normal gg02tx$,
        AssertCurpos [1, 10]
      End

      It can be dot-repeated.
        call setline(1, ['aax xbb', 'aaax xbbb'])
        normal gg0tx$d,
        Assert Equals(getline(1), 'aax x')

        normal j$.
        Assert Equals(getline(2), 'aaax x')
      End

    End

    Context with T
      It repeats previous search.
        normal Tx

        call setline(1, 'aax bbx ccx')
        normal gg0,
        AssertCurpos [1, 2]

        normal ,
        AssertCurpos [1, 6]
      End

      It can be dot-repeated.
        call setline(1, ['aax xbb', 'aaax xbbb'])
        normal gg$Tx0d,
        Assert Equals(getline(1), 'x xbb')

        normal j0.
        Assert Equals(getline(2), 'x xbbb')
      End

    End

  End

End
